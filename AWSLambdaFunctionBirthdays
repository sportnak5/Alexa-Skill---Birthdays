// Route the incoming request based on type (LaunchRequest, IntentRequest,
// etc.) The JSON body of the request is provided in the event parameter.
var dates = [];
var names = [];

exports.handler = function (event, context) {
    try {
        console.log("event.session.application.applicationId=" + event.session.application.applicationId);

        /**
         * Uncomment this if statement and populate with your skill's application ID to
         * prevent someone else from configuring a skill that sends requests to this function.
         */

    // if (event.session.application.applicationId !== "") {
    //     context.fail("Invalid Application ID");
    //  }

        if (event.session.new) {
            onSessionStarted({requestId: event.request.requestId}, event.session);
        }

        if (event.request.type === "LaunchRequest") {
            onLaunch(event.request,
                event.session,
                function callback(sessionAttributes, speechletResponse) {
                    context.succeed(buildResponse(sessionAttributes, speechletResponse));
                });
        } else if (event.request.type === "IntentRequest") {
            onIntent(event.request,
                event.session,
                function callback(sessionAttributes, speechletResponse) {
                    context.succeed(buildResponse(sessionAttributes, speechletResponse));
                });
        } else if (event.request.type === "SessionEndedRequest") {
            onSessionEnded(event.request, event.session);
            context.succeed();
        }
    } catch (e) {
        context.fail("Exception: " + e);
    }
};

/**
 * Called when the session starts.
 */
function onSessionStarted(sessionStartedRequest, session) {
    // add any session init logic here
}

/**
 * Called when the user invokes the skill without specifying what they want.
 */
function onLaunch(launchRequest, session, callback) {
  getWelcomeResponse(callback)
}

/**
 * Called when the user specifies an intent for this skill.
 */
function onIntent(intentRequest, session, callback) {

    var intent = intentRequest.intent
    var intentName = intentRequest.intent.name;

    // dispatch custom intents to handlers here
    switch(intentName){
        case whoseBirthday:
          handleWhoseBirthdayResponse(intent, session, callback)
          break;
        case isBirthday:
          handleIsBirthdayResponse(intent, session, callback)
          break;
        case setBirthday:
          handleSetBirthdayResponse(intent, session, callback)
          break;
        case celebrityBirthday:
          handleCelebrityBirthdayResponse(intent, session, callback)
          break;
        case howOld:
          handleHowOldResponse(intent, session, callback)
          break;
        default:
          throw "Invalid intent"
          break;
    }
}

/**
 * Called when the user ends the session.
 * Is not called when the skill returns shouldEndSession=true.
 */
function onSessionEnded(sessionEndedRequest, session) {

}

// ------- Skill specific logic -------

function getWelcomeResponse(callback) {
    var speechOutput = 'Welcome to the Birthdays app on your Alexa'
    var reprompt = 'please ask me what you want to know about birthdays'
    var header = 'Birthday info'
    var shouldEndSession = false
    var sessionAttributes = {
      "speechOutput" = speechOutput
      "repromptText" = reprompt
    }
    callback(sessionAttributes, buildSpeechletResponse(header, speechOutput, reprompt, shouldEndSession))
}

function handleWhoseBirthdayResponse(intent, session, callback){
  var today = new Date();
  var dd = today.getDate();
  var mm = today.getMonth()+1;
  var yyyy = today.getFullYear();
  if(dd<10) {
    dd = '0'+dd
  } 
  if(mm<10) {
    mm = '0'+mm
  } 
  today = mm + '/' + dd + '/' + yyyy;
  if(dates.length > 0){
    var position = -1;
    for(var i = 0; i < dates.length; i++){
      if(dates[i] === today){
        position = i;
        break;
      }
    }
    if(position){
      var speechOutput = 'Today is ' + names[position] + 's birthday'
      var reprompt = ''
      var header = names[position]
    }else{
      var speechOutput = 'I dont know anybody with a birthday today'
      var repromptText = 'Do you want to set a birthday for today?'
      var header = 'no birthday'
    }
  }else{
    var speechOutput = 'I dont know any birthdays'
    var repromptText = 'Do you want to set a birthday?'
    var header = 'no birthdays'
  }
  var shouldEndSession = false
  callback(sessionAttributes, buildSpeechletResponse(header, speechOutput, reprompt, shouldEndSession))
}

function handleIsBirthdayResponse(intent, session, callback){
  var name = intent.slots.person.value;
  if(names.length > 0){
    var position = -1;
    for(var i = 0; i < names.length; i++){
      if(names[i] === name){
        position = i;
        break;
      }
    }
    if(position){
      var speechOutput = 'it is ' + name + 's birthday'
      var reprompt = ''
      var header = dates[position]
    }else{
      var speechOutput = 'No today is not their birthday'
      var repromptText = ''
      var header = 'no birthday'
    }
  }else{
    var speechOutput = 'I dont know any birthdays'
    var repromptText = 'Do you want to set a birthday?'
    var header = 'no birthdays'
  }
  var shouldEndSession = false
  callback(sessionAttributes, buildSpeechletResponse(header, speechOutput, reprompt, shouldEndSession))
}

function handleSetBirthdayResponse(intent, session, callback){
  var date = intent.slots.date.value
  var name = intent.slots.person.value
  var position = -1;
  for(var i = 0; i < names.length; i++){
    if(names[i] === name){
      position = i;
      break;
    }
  }
  if(position){
    var speechOutput = 'that person already has a birthday assigned'
    var repromptText = ''
    var header = 'no new birthday'
  }else{
    dates.push(date)
    names.push(name)
    var speechOutput = name + 's birthday was set to ' + date
    var repromptText = ''
    var header = 'birthday set'
  }
  var shouldEndSession = false
  callback(sessionAttributes, buildSpeechletResponse(header, speechOutput, reprompt, shouldEndSession))
}

//hold on this unsure if i want to do this one

function handleHowOldResponse(intent, session, callback){
  var name = intent.slots.person.value
  for(var i = 0; i < names.length; i++){
    if(names[i] === name){
      position = i;
      break;
    }
  }
  if(position){
    var today = new Date();
    var dd = today.getDate();
    var mm = today.getMonth()+1;
    var yyyy = today.getFullYear();
    if(dd<10) {
      dd = '0'+dd
    } 
    if(mm<10) {
      mm = '0'+mm
    } 
    today = mm + '/' + dd + '/' + yyyy;
    }

}

//yea unsure

function handleGetHelpRequest(intent, session, callback) {
    // Ensure that session.attributes has been initialized
    if (!session.attributes) {
        session.attributes = {};

}

function handleFinishSessionRequest(intent, session, callback) {
    // End the session with a "Good bye!" if the user wants to quit the game
    callback(session.attributes,
        buildSpeechletResponseWithoutCard("Good bye!", "", true));
}


// ------- Helper functions to build responses for Alexa -------


function buildSpeechletResponse(title, output, repromptText, shouldEndSession) {
    return {
        outputSpeech: {
            type: "PlainText",
            text: output
        },
        card: {
            type: "Simple",
            title: title,
            content: output
        },
        reprompt: {
            outputSpeech: {
                type: "PlainText",
                text: repromptText
            }
        },
        shouldEndSession: shouldEndSession
    };
}

function buildSpeechletResponseWithoutCard(output, repromptText, shouldEndSession) {
    return {
        outputSpeech: {
            type: "PlainText",
            text: output
        },
        reprompt: {
            outputSpeech: {
                type: "PlainText",
                text: repromptText
            }
        },
        shouldEndSession: shouldEndSession
    };
}

function buildResponse(sessionAttributes, speechletResponse) {
    return {
        version: "1.0",
        sessionAttributes: sessionAttributes,
        response: speechletResponse
    };
}
